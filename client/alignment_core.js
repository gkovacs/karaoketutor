// Generated by CoffeeScript 1.6.3
(function() {
  var compute_time_word_path, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  compute_time_word_path = function(time_to_gwordnum_count) {
    var DP, backptr_wordtrans, gwordnum, gwordnum_count, i, is_wordtrans, last_row, time, time_to_word, word_idx, wordstay_score, wordtransition_score, _i, _j, _k, _l, _len, _ref, _ref1, _ref2;
    DP = [];
    backptr_wordtrans = [];
    for (time in time_to_gwordnum_count) {
      gwordnum_count = time_to_gwordnum_count[time];
      DP[time] = [];
      backptr_wordtrans[time] = [];
      for (gwordnum = _i = 0, _ref = Math.min(time, gwordnum_count.length - 1); 0 <= _ref ? _i <= _ref : _i >= _ref; gwordnum = 0 <= _ref ? ++_i : --_i) {
        DP[time].push(0);
        backptr_wordtrans[time].push(0);
      }
    }
    for (time = _j = 0, _len = time_to_gwordnum_count.length; _j < _len; time = ++_j) {
      gwordnum_count = time_to_gwordnum_count[time];
      if (time === 0) {
        DP[0][0] = time_to_gwordnum_count[0][0];
        continue;
      }
      for (gwordnum = _k = 0, _ref1 = Math.min(time, gwordnum_count.length - 1); 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; gwordnum = 0 <= _ref1 ? ++_k : --_k) {
        wordtransition_score = -1;
        if (gwordnum > 0) {
          wordtransition_score = DP[time - 1][gwordnum - 1] + time_to_gwordnum_count[time][gwordnum];
        }
        wordstay_score = -1;
        if ((DP[time - 1] != null) && (DP[time - 1][gwordnum] != null)) {
          wordstay_score = DP[time - 1][gwordnum] + time_to_gwordnum_count[time][gwordnum];
        }
        if (wordtransition_score > wordstay_score) {
          backptr_wordtrans[time][gwordnum] = 1;
          DP[time][gwordnum] = wordtransition_score;
        } else {
          DP[time][gwordnum] = wordstay_score;
        }
      }
    }
    time_to_word = [];
    last_row = backptr_wordtrans[backptr_wordtrans.length - 1];
    word_idx = last_row.length - 1;
    for (i = _l = _ref2 = backptr_wordtrans.length - 1; _ref2 <= 0 ? _l <= 0 : _l >= 0; i = _ref2 <= 0 ? ++_l : --_l) {
      is_wordtrans = backptr_wordtrans[i][word_idx];
      time_to_word.push(word_idx);
      if (is_wordtrans) {
        word_idx -= 1;
      }
    }
    time_to_word.reverse();
    return time_to_word;
  };

  root.compute_time_word_path = compute_time_word_path;

}).call(this);
