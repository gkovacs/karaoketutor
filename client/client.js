// Generated by LiveScript 1.2.0
var root, stdgreeting, removePunctuation, getVideoSnippet, getVideoTitle, addNewVideo, videoNameFromID;
root = typeof global != 'undefined' && global !== null ? global : window;
stdgreeting = function(){
  return console.log('hello?');
};
removePunctuation = function(str){
  var i$, len$, punctuation;
  for (i$ = 0, len$ = '[]"-+\'<>^&{}'.length; i$ < len$; ++i$) {
    punctuation = '[]"-+\'<>^&{}'[i$];
    str = str.split(punctuation).join(' ');
  }
  return str;
};
getVideoSnippet = root.getVideoSnippet = function(videoID, callback){
  videoID = videoID.split('http://www.youtube.com/watch?v=').join('');
  return Meteor.call('getVideoSnippet', videoID, function(error, result){
    return callback(result);
  });
};
getVideoTitle = root.getVideoTitle = function(videoID, callback){
  return getVideoSnippet(videoID, function(data){
    var i$, ref$, len$, item;
    if (data == null) {
      callback(null);
      return;
    }
    for (i$ = 0, len$ = (ref$ = data.items).length; i$ < len$; ++i$) {
      item = ref$[i$];
      callback(item.snippet.title);
      return;
    }
    return callback(null);
  });
};
Template.hello.greeting = function(){
  return "Welcome to karaoketutor?";
};
Template.hello.events({
  'click input': function(){
    return bootbox.alert("You pressed the button");
  }
});
Template.videoinput.songs = function(){
  var searchquery, searchregex;
  searchquery = Session.get('searchsongs_query');
  if (searchquery == null) {
    searchquery = '';
  }
  searchregex = '.*' + searchquery + '.*';
  return Songs.find({
    name: {
      $regex: searchregex,
      $options: 'i'
    }
  }, {
    sort: {
      name: -1
    }
  });
};
addNewVideo = function(songurl){
  var songID, duplicate;
  if (songurl == null || songurl === '') {
    bootbox.alert('you need to specify the song url');
    return false;
  }
  if (songurl.indexOf('http://www.youtube.com/watch?v=') !== 0) {
    bootbox.alert('the song url must start with http://www.youtube.com/watch?v=');
    return false;
  }
  songID = songurl.split('http://www.youtube.com/watch?v=').join('');
  duplicate = Songs.findOne({
    _id: songID
  });
  if (duplicate != null) {
    bootbox.alert('this video is a duplicate of ' + duplicate.name);
    return false;
  }
  getVideoTitle(songurl, function(songname){
    return Songs.insert({
      name: songname,
      url: songurl,
      videoID: songID,
      _id: songID,
      time_added: new Date().getTime(),
      thumbs_up: 0,
      thumbs_down: 0,
      lyricIDs: []
    });
  });
  return false;
};
Template.videoinput.events({
  'click #ytinputadd': function(evt){
    var songurl;
    songurl = $('#ytinputurl').val().trim();
    addNewVideo(songurl);
    return false;
  },
  'keypress #ytinputurl': function(evt){
    var keycode, songurl;
    keycode = evt.keyCode != null
      ? evt.keyCode
      : evt.which;
    if (keycode === 13) {
      songurl = $('#ytinputurl').val().trim();
      addNewVideo(songurl);
      return false;
    }
  },
  'keyup #searchsongs': function(evt){
    return Session.set('searchsongs_query', $('#searchsongs').val().trim());
  }
});
Template.songtemplate.lyrics = function(){
  return Lyrics.find({
    videoID: this.videoID
  });
};
Template.songtemplate.events({
  'click .addlyrics': function(evt, template){
    var songname, videoID, songurl;
    songname = template.data.name;
    videoID = template.data.videoID;
    songurl = template.data.url;
    return bootbox.confirm("<div style=\"height: 300px\">\nPaste in lyrics for <a href=\"" + songurl + "\" target=\"_blank\">" + songname + "</a>\n(<a href=\"http://www.google.com/search?q=" + (removePunctuation(songname) + ' lyrics') + "\" target=\"_blank\">Search for Lyrics</a>):<br>\n<textarea style=\"width: 100%; height: 100%\" id=\"songlyricsinput\"></textarea>\n</div>\n", function(result){
      var songlyrics, numLyricsForSong, lyricID;
      if (result) {
        songlyrics = $('#songlyricsinput').val().trim();
        if (songlyrics === '') {
          return;
        }
        numLyricsForSong = template.data.lyricIDs.length;
        lyricID = videoID + '_' + numLyricsForSong;
        console.log(lyricID);
        Lyrics.insert({
          _id: lyricID,
          lyricID: lyricID,
          lyricidx: numLyricsForSong,
          videoID: videoID,
          text: songlyrics,
          timingIDs: [],
          time_added: new Date().getTime(),
          thumbs_up: 0,
          thumbs_down: 0
        });
        return Songs.update({
          _id: videoID
        }, {
          $push: {
            lyricIDs: lyricID
          }
        });
      }
    });
  }
});
Template.lyricstemplate.preview = function(){
  var lines, i$, ref$, len$, line;
  lines = [];
  for (i$ = 0, len$ = (ref$ = this.text.split('\n')).length; i$ < len$; ++i$) {
    line = ref$[i$];
    line = line.trim();
    if (line[0] === '[') {
      continue;
    }
    lines.push(line);
  }
  return lines.join(' ').substring(0, 40);
};
Template.lyricstemplate.songname = function(){
  return videoNameFromID(this.videoID);
};
videoNameFromID = function(videoID){
  return Songs.findOne({
    _id: videoID
  }).name;
};
Template.lyricstemplate.events({
  'click .viewlyrics': function(evt, template){
    var lyrics, lyricID, songname;
    lyrics = template.data.text;
    lyricID = template.data.lyricID;
    songname = videoNameFromID(template.data.videoID);
    console.log(songname);
    return bootbox.confirm("" + songname + "<br><br>\n<a href=\"/playlyrics?lyricID=" + lyricID + "\" target=\"_blank\">Start Playing</a><br><br>\n" + lyrics, function(result){
      return console.log(result);
    });
  }
});