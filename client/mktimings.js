// Generated by LiveScript 1.2.0
var root, submitTimingLogs, playbackRecorded, scrollToView, incrementActiveIndex, decrementActiveIndex, setActiveIndex, setActiveIndexAll, onYouTubeIframeAPIReady, injectScriptTag, mouseoverFN;
root = typeof global != 'undefined' && global !== null ? global : window;
root.ytplayer = null;
root.videoID = null;
root.gameID = null;
root.lyricID = null;
root.numWordsTotal = 1;
root.activeIndex = 0;
root.prevActiveIndex = 0;
root.prevprevActiveIndex = 0;
root.atEndOfLine = false;
root.activeLineIndex = 0;
root.activePosInLine = 0;
root.isVideoPlaying = false;
root.gameLogs = {};
root.indexInTimingList = 0;
submitTimingLogs = root.submitTimingLogs = function(logs){
  if (logs == null) {
    logs = root.gameLogs[root.gameID];
  }
  return TimingLogs.insert({
    lyricID: lyricID,
    logs: logs
  });
};
playbackRecorded = root.playbackRecorded = function(timingList){
  root.indexInTimingList = 0;
  root.clientCall('', 'playVideoAtTimeForGame', [0, root.gameID]);
  return setInterval(function(){
    if (root.indexInTimingList >= timingList.length) {
      return;
    }
    setActiveIndex(timingList[root.indexInTimingList]);
    return root.indexInTimingList += 1;
  }, 250);
};
scrollToView = function(element){
  var offset, visible_area_start, visible_area_end;
  offset = element.offset().top;
  if (!element.is(":visible")) {
    element.css({
      "visiblity": "hidden"
    }).show();
    offset = element.offset().top;
    element.css({
      "visiblity": "",
      "display": ""
    });
  }
  visible_area_start = $(window).scrollTop();
  visible_area_end = visible_area_start + window.innerHeight;
  if (offset < visible_area_start || offset > visible_area_end) {
    $('html,body').animate({
      scrollTop: offset - window.innerHeight / 3
    }, 1000);
    return false;
  }
  return true;
};
incrementActiveIndex = function(){
  var idx;
  idx = Session.get('activeIndex') + 1;
  if (idx >= root.numWordsTotal) {
    idx = root.numWordsTotal - 1;
  }
  return setActiveIndexAll(idx);
};
decrementActiveIndex = function(){
  var idx;
  idx = Session.get('activeIndex') - 1;
  if (idx <= 0) {
    idx = 0;
  }
  return setActiveIndexAll(idx);
};
setActiveIndex = root.setActiveIndex = function(idx){
  var target;
  if (idx === root.activeIndex) {
    return false;
  }
  target = $('.lyricWord_' + idx);
  root.activeLineIndex = parseInt(target.attr('line_idx'));
  root.activePosInLine = parseInt(target.attr('pos_in_line'));
  if (root.activeLineIndex !== parseInt($('.lyricWord_' + (idx + 1)).attr('line_idx'))) {
    root.atEndOfLine = true;
  } else {
    root.atEndOfLine = false;
  }
  target.focus();
  root.prevprevActiveIndex = root.prevActiveIndex;
  root.prevActiveIndex = root.activeIndex;
  root.activeIndex = idx;
  Session.set('activeIndex', idx);
  scrollToView(target);
  return true;
};
setActiveIndexAll = root.setActiveIndexAll = function(idx){
  if (setActiveIndex(idx)) {
    if (root.isVideoPlaying) {
      root.gameLogs[root.gameID].push({
        systemTime: new Date().getTime(),
        videoTime: root.ytplayer.getCurrentTime(),
        wordIdx: root.activeIndex,
        wordPosInLine: root.activePosInLine,
        lineIdx: root.activeLineIndex
      });
    }
    return root.clientCall('', 'setActiveIndexForGame', [idx, root.gameID]);
  }
};
/*
onPlayerStateChange = root.onPlayerStateChange = -> (event) ->
  console.log 'new state: ' + event.data
  if event.data == YT.PlayerState.PLAYING
    root.clientCall('', 'playVideoAtTimeForGame', [root.ytplayer.getCurrentTime(), root.gameID])
  if event.data == YT.PlayerState.PAUSED
    root.clientCall('', 'pauseVideoAtTimeForGame', [root.ytplayer.getCurrentTime(), root.gameID])
*/
Template.mktimings.events({
  'click #playPause': function(evt, template){
    var action;
    action = $('#playPause').text();
    if (action === 'Play') {
      return root.clientCall('', 'playVideoAtTimeForGame', [root.ytplayer.getCurrentTime(), root.gameID]);
    } else {
      return root.clientCall('', 'pauseVideoAtTimeForGame', [root.ytplayer.getCurrentTime(), root.gameID]);
    }
  }
});
onYouTubeIframeAPIReady = root.onYouTubeIframeAPIReady = function(){
  console.log('youtube API loaded!');
  if (root.ytplayer == null) {
    return root.ytplayer = new YT.Player('ytplayer', {
      height: '100',
      width: '640',
      videoId: root.videoID,
      events: {
        onReady: function(){
          root.ytplayer.playVideo();
          return root.ytplayer.pauseVideo();
        }
      }
    });
  }
};
injectScriptTag = function(src, id){
  var tag, firstScriptTag;
  tag = document.createElement('script');
  tag.src = src;
  tag.id = id;
  firstScriptTag = document.getElementsByTagName('script')[0];
  return firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
};
Template.mktimings.setupBackend = function(){
  root.gameID = this.gameID;
  root.lyricID = this.lyricID;
  if (root.gameLogs[root.gameID] == null) {
    root.gameLogs[root.gameID] = [];
  }
  return '';
};
Template.mktimings.invokeAfterLoad = function(){
  root.videoID = this.videoID;
  if (root.YT != null || $('#ytScriptTag').length > 0) {
    console.log('already loaded');
    return '';
  }
  injectScriptTag('https://www.youtube.com/iframe_api', 'ytScriptTag');
  return '';
};
Template.mktimings.userID = function(){
  return Session.get('userID');
};
Template.mktimings.lyricLines = function(){
  var lines, output, global_word_idx, i$, len$, line_idx, line, lineinfo, j$, ref$, len1$, word_idx, word, wordinfo;
  lines = this.lyricText.split('\n');
  output = [];
  global_word_idx = 0;
  for (i$ = 0, len$ = lines.length; i$ < len$; ++i$) {
    line_idx = i$;
    line = lines[i$];
    lineinfo = {};
    lineinfo.line = line.trim();
    lineinfo.line_idx = line_idx;
    lineinfo.global_word_idx = global_word_idx;
    lineinfo.words = [];
    for (j$ = 0, len1$ = (ref$ = line.split(' ')).length; j$ < len1$; ++j$) {
      word_idx = j$;
      word = ref$[j$];
      if (word.trim() === '') {
        continue;
      }
      wordinfo = {};
      wordinfo.word = word;
      wordinfo.pos_in_line = word_idx;
      wordinfo.line_idx = line_idx;
      wordinfo.global_word_idx = global_word_idx;
      global_word_idx += 1;
      lineinfo.words.push(wordinfo);
    }
    output.push(lineinfo);
  }
  root.numWordsTotal = global_word_idx;
  return output;
};
Template.wordtemplate.extraPadding = function(){
  if (this.pos_in_line === 0) {
    return 'padding-left: 10px;';
  }
  return '';
};
Template.wordtemplate.isActive = function(){
  if (Session.equals('activeIndex', this.global_word_idx)) {
    return 'activeWord';
  } else {
    return '';
  }
};
mouseoverFN = function(evt, template){
  var newidx, lineidx, linepos;
  newidx = template.data.global_word_idx;
  lineidx = template.data.line_idx;
  linepos = template.data.pos_in_line;
  if (root.atEndOfLine) {
    if (lineidx > root.activeLineIndex && linepos === 0 && lineidx - root.activeLineIndex < 3) {
      setActiveIndexAll(newidx);
    }
  } else {
    return setActiveIndexAll(newidx);
  }
};
Template.wordtemplate.events({
  'click .lyricWord': function(evt, template){
    return setActiveIndexAll(template.data.global_word_idx);
  },
  'mouseover .lyricWord': mouseoverFN,
  'mouseenter .lyricWord': mouseoverFN,
  'touchstart .lyricWord': function(evt, template){
    return setActiveIndexAll(template.data.global_word_idx);
  }
});
$(document).keydown(function(evt){
  var keycode;
  keycode = evt.keyCode != null
    ? evt.keyCode
    : evt.which;
  if (keycode === 39) {
    incrementActiveIndex();
    return false;
  }
  if (keycode === 32) {
    incrementActiveIndex();
    return false;
  }
  if (keycode === 37) {
    decrementActiveIndex();
    return false;
  }
  return console.log(keycode);
});