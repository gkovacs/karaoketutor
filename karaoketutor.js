// Generated by LiveScript 1.2.0
var root, Songs, Lyrics, YoutubeSnippets, TimingGames, TimingLogs, getLyricInfoSafe, pickRandom, randomString, getLyricInfo, userID;
root = typeof global != 'undefined' && global !== null ? global : window;
Songs = root.Songs = new Meteor.Collection("songs");
Lyrics = root.Lyrics = new Meteor.Collection("lyrics");
YoutubeSnippets = root.YoutubeSnippets = new Meteor.Collection("ytsnippets");
TimingGames = root.TimingGames = new Meteor.Collection("timinggames");
TimingLogs = root.TimingLogs = new Meteor.Collection("timinglogs");
Router.configure({
  layoutTemplate: 'layout'
});
getLyricInfoSafe = root.getLyricInfoSafe = function(lyricID){
  var error;
  try {
    if (lyricID == null || lyricID === '') {
      return null;
    }
    return getLyricInfo(lyricID, gameID);
  } catch (e$) {
    error = e$;
    return null;
  }
};
pickRandom = function(lst){
  var idx;
  idx = Math.floor(Math.random() * lst.length);
  return lst[idx];
};
randomString = root.randomString = function(length){
  var output, available, i$, ref$, len$, i;
  output = [];
  available = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"].concat(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]);
  for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
    i = ref$[i$];
    output.push(pickRandom(available));
  }
  return output.join('');
  function fn$(){
    var i$, to$, results$ = [];
    for (i$ = 0, to$ = length; i$ < to$; ++i$) {
      results$.push(i$);
    }
    return results$;
  }
};
getLyricInfo = root.getLyricInfo = function(lyricID){
  var lyricDoc, lyricText, videoID, videoDoc, url, name, gameID;
  lyricDoc = Lyrics.findOne({
    _id: lyricID
  });
  lyricText = lyricDoc.text;
  videoID = lyricDoc.videoID;
  videoDoc = Songs.findOne({
    _id: videoID
  });
  url = videoDoc.url;
  name = videoDoc.name;
  if (typeof gameID == 'undefined' || gameID === null) {
    gameID = randomString(10);
  }
  return {
    lyricID: lyricID,
    videoID: videoID,
    url: url,
    name: name,
    lyricText: lyricText
  };
};
Router.map(function(){
  this.route('home', {
    path: '/',
    template: 'home'
  });
  this.route('playlyrics', {
    path: '/playlyrics',
    template: 'playlyrics',
    notFoundTemplate: 'loading',
    data: function(){
      return getLyricInfoSafe(this.params.lyricID, this.params.gameID);
    }
  });
  return this.route('mktimings', {
    path: '/mktimings',
    template: 'mktimings',
    notFoundTemplate: 'loading',
    data: function(){
      var lyricsInfo;
      lyricsInfo = getLyricInfoSafe(this.params.lyricID);
      if (lyricsInfo == null || this.params.gameID == null) {
        return null;
      }
      lyricsInfo.gameID = this.params.gameID;
      lyricsInfo.numPlayers = this.params.numPlayers != null ? parseInt(this.params.numPlayers) : 2;
      return lyricsInfo;
    }
  });
});
if (Meteor.isClient) {
  userID = $.cookie('userID');
  if (userID == null || userID === '') {
    userID = randomString(10);
    $.cookie('userID', userID);
  }
  Session.set('userID', userID);
  root.userID = userID;
  Meteor.ClientCall.setClientId(userID);
  Meteor.ClientCall.methods({
    setActiveIndex: function(idx){
      console.log('new active index is: ' + idx);
      return root.setActiveIndex(idx);
    },
    setActiveIndexForGame: function(idx, gameID){
      if (root.gameID === gameID) {
        return root.setActiveIndex(idx);
      }
    },
    playVideoAtTimeForGame: function(time, gameID){
      if (root.gameID === gameID && root.ytplayer != null) {
        root.isVideoPlaying = true;
        $('#playPause').text('Pause');
        root.ytplayer.seekTo(time);
        return root.ytplayer.playVideo();
      }
    },
    pauseVideoAtTimeForGame: function(time, gameID){
      if (root.gameID === gameID && root.ytplayer != null) {
        root.isVideoPlaying = false;
        $('#playPause').text('Play');
        root.ytplayer.pauseVideo();
        return root.ytplayer.seekTo(time);
      }
    }
  });
  root.clientCall = function(clientId, method, args, callback){
    return Meteor.call('clientCall', clientId, method, args, callback);
  };
}